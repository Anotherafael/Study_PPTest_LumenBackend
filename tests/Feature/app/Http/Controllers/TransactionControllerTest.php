<?php

use App\Models\User;
use App\Models\Retailer;
use App\Events\SendNotification;
use Laravel\Lumen\Testing\TestCase;
use Illuminate\Auth\AuthenticationException;
use Laravel\Lumen\Testing\DatabaseMigrations;

class TransactionControllerTest extends TestCase
{

    use DatabaseMigrations;

    public function createApplication()
    {
        return require './bootstrap/app.php';
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testUserShouldNotSendWrongPayeeProvider()
    {
        $this->artisan('passport:install');
        $user = User::factory()->create();

        $payload = [
            'provider' => 'wrong',
            'payee_id' => 'doesntexist',
            'amount' => 111
        ];

        /** @var \Illuminate\Contracts\Auth\Authenticatable $user */
        $request = $this->actingAs($user, 'users')->post(route('postTransaction'), $payload);
        $request->assertResponseStatus(422);

    }

    public function testPayeeShouldBeExistingOnProviderToTransfer()
    {
        $this->artisan('passport:install');
        $user = User::factory()->create();
        $payload = [
            'provider' => 'users',
            'payee_id' => 'doesntexist',
            'amount' => 123
        ];
        /** @var \Illuminate\Contracts\Auth\Authenticatable $user */
        $request = $this->actingAs($user, 'users')
            ->post(route('postTransaction'), $payload);

        $request->assertResponseStatus(404);

    }

    public function testPayeeShouldBeAValidUserToTransfer()
    {
        $this->artisan('passport:install');
        $user = User::factory()->create();
        $payload = [
            'provider' => 'users',
            'payee_id' => 'fodasenexiste',
            'amount' => 123
        ];
        /** @var \Illuminate\Contracts\Auth\Authenticatable $user */
        $request = $this->actingAs($user, 'users')
            ->post(route('postTransaction'), $payload);

        $request->assertResponseStatus(404);

    }

    public function testRetailerShouldNotTransfer()
    {
        $this->artisan('passport:install');
        $retailer = Retailer::factory()->create();
        $payload = [
            'provider' => 'users',
            'payee_id' => 'fodasenexiste',
            'amount' => 123
        ];
        /** @var \Illuminate\Contracts\Auth\Authenticatable $retailer */
        $request = $this->actingAs($retailer, 'retailers')
            ->post(route('postTransaction'), $payload);

        $request->assertResponseStatus(401);
    }

    public function testUserShouldHaveMoneyToPerformSomeTransaction()
    {
        $this->artisan('passport:install');
        $userPayer = User::factory()->create();
        $userPayee = User::factory()->create();

        $payload = [
            'provider' => 'users',
            'payee_id' => $userPayee->id,
            'amount' => 123
        ];

        /** @var \Illuminate\Contracts\Auth\Authenticatable $userPayer */
        $request = $this->actingAs($userPayer, 'users')
            ->post(route('postTransaction'), $payload);

        $request->assertResponseStatus(422);
    }

    public function testUserCanTransferMoney()
    {
        $this->expectsEvents(SendNotification::class);
        $this->artisan('passport:install');
        $userPayer = User::factory()->create();
        $userPayer->wallet->deposit(1000);
        $userPayee = User::factory()->create();

        $payload = [
            'provider' => 'users',
            'payee_id' => $userPayee->id,
            'amount' => 100
        ];
        /** @var \Illuminate\Contracts\Auth\Authenticatable $userPayer */
        $request = $this->actingAs($userPayer, 'users')
            ->post(route('postTransaction'), $payload);


        $request->assertResponseStatus(200);

        $request->seeInDatabase('wallets', [
            'id' => $userPayer->wallet->id,
            'balance' => 900
        ]);

        $request->seeInDatabase('wallets', [
            'id' => $userPayee->wallet->id,
            'balance' => 100
        ]);


    }
}
